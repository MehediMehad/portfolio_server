generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String   @id @default(uuid())
  name               String
  profilePhoto       String
  contactNumber      String
  role               UserRole
  email              String   @unique
  password           String
  aboutMe            String
  designation        String
  projectCount       Int      @default(0)
  blogCount          Int      @default(0)
  skillCount         Int      @default(0)
  socialMediaLinks   String[]
  gender             Gender   @default(Male)
  needPasswordChange Boolean  @default(true)
  address            String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relations
  projects Projects[]
  blogs    Blogs[]
  Skills   Skills[]

  @@map("users")
}

model Projects {
  id                 String        @id @default(uuid())
  projectImage       String
  title              String
  overview           String
  description        String
  date_time          String
  techStack          String[]
  features           String[]
  whatILearned       String[]
  futureImprovements String[]
  liveURL            String
  gitHubURL          String
  is_public          Boolean       @default(true)
  heroSection        Boolean       @default(false)
  isDeleted          Boolean       @default(false)
  status             ProjectStatus @default(PUBIC)
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt

  authorId String
  author   User   @relation(fields: [authorId], references: [id])
  // Skills   Skills? @relation(fields: [skillsId], references: [id])
  // skillsId String?

  @@map("projects")
}

model Blogs {
  id         String   @id @default(uuid())
  title      String
  overview   String
  image      String
  content    String
  tags       String[]
  is_public  Boolean  @default(true)
  isFeatured Boolean  @default(false)
  isDeleted  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  @@map("blogs")
}

model Skills {
  id           String   @id @default(uuid())
  name         String   @unique
  level        String
  icon         String
  isDeleted    Boolean  @default(false)
  heroSection  Boolean  @default(false)
  is_public    Boolean  @default(true)
  skillCount   Int      @default(0)
  projectCount Int      @default(0)
  blogCount    Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  // projects Projects[]
  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@map("skills")
}

model SocialMedia {
  id           String   @id @default(uuid())
  platformName String   @unique
  url          String
  icon         String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("social_media")
}

enum ProjectStatus {
  PUBIC
  PRIVATE
}

enum UserRole {
  ADMIN
  USER
}

enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
}

enum Gender {
  Male
}
